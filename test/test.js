// Generated by CoffeeScript 1.7.1
describe('list-filter-text', function() {
  describe('listFilterTextApi', function() {
    beforeEach(module('listFilterText'));
    beforeEach(inject(function($injector) {
      return this.service = $injector.get('listFilterTextApi');
    }));
    it('should set clearFlag to false when #reset is called', function() {
      this.service.clearFlag = true;
      this.service.reset();
      return expect(this.service.clearFlag).toBe(false);
    });
    return it('should set clearFlag to true when #clear is called', function() {
      this.service.clearFlag = false;
      this.service.clear();
      return expect(this.service.clearFlag).toBe(true);
    });
  });
  return describe('listFilterTextDirective', function() {
    var KEYS, listFilterTextApi;
    KEYS = {
      enter: 13,
      esc: 27
    };
    listFilterTextApi = function() {
      this.clear = function() {};
      return this.reset = function() {};
    };
    beforeEach(module('listFilterText'), function($provide) {
      $provide.value('KEYS', KEYS);
      return $provide.value('listFilterTextApi', listFilterTextApi);
    });
    beforeEach(function() {
      return inject((function(_this) {
        return function($compile, $rootScope, $controller) {
          _this.$compile = $compile;
          _this.scope = $rootScope.$new();
          return _this.element = angular.element("<list-filter-text\n	class=\"size-medium\"\n	param=\"searchText\"\n	placeholder=\"Search\"\n	typeAhead=\"false\"\n	disabled=\"foo\"\n></list-filter-text>");
        };
      })(this));
    });
    beforeEach(function() {
      (this.$compile(this.element))(this.scope);
      this.scope.$apply();
      return this.scope = this.element.scope();
    });
    it('should set the element\'s className to the "class" attribute', function() {
      return expect(this.element.find('input').hasClass('size-medium')).toBe(true);
    });
    it('should set the element\'s placeholder to the "placeholder" attribute', function() {
      return expect(this.element.find('input').attr('placeholder')).toBe('Search');
    });
    it('should set the element\'s disabled attribute to true when the disabled expression is truthy', inject(function($rootScope) {
      $rootScope.foo = 1;
      this.scope.$apply();
      expect(this.element.find('input').attr('disabled')).toBe('disabled');
      $rootScope.foo = false;
      this.scope.$apply();
      return expect(this.element.find('input').attr('disabled')).toBe(void 0);
    }));
    describe('#change', function() {
      it('should call #search if the user pressed ENTER', function() {
        spyOn(this.scope, 'search');
        this.scope.change({
          keyCode: 13
        });
        return expect(this.scope.search).toHaveBeenCalled();
      });
      it('should call #search if typeAhead is true', function() {
        spyOn(this.scope, 'search');
        this.scope.typeAhead = true;
        this.scope.change({
          keyCode: -1
        });
        return expect(this.scope.search).toHaveBeenCalled();
      });
      it('should call not call #search otherwise', function() {
        spyOn(this.scope, 'search');
        this.scope.typeAhead = false;
        this.scope.change({
          keyCode: -1
        });
        return expect(this.scope.search).not.toHaveBeenCalled();
      });
      it('should call #clear and #blur if the user pressed ESC, regardless of typeAhead', function() {
        this.scope.typeAhead = true;
        spyOn(this.scope, 'clear');
        spyOn(this.scope, 'blur');
        this.scope.change({
          keyCode: 27
        });
        expect(this.scope.blur).toHaveBeenCalled();
        expect(this.scope.clear).toHaveBeenCalled();
        this.scope.typeAhead = false;
        this.scope.change({
          keyCode: 27
        });
        expect(this.scope.blur).toHaveBeenCalled();
        return expect(this.scope.clear).toHaveBeenCalled();
      });
      it('should call not #clear or #blur otherwise', function() {
        spyOn(this.scope, 'clear');
        spyOn(this.scope, 'blur');
        this.scope.change({
          keyCode: -1
        });
        expect(this.scope.blur).not.toHaveBeenCalled();
        return expect(this.scope.clear).not.toHaveBeenCalled();
      });
      return it('should set scope.dirty to true otherwise', function() {
        this.scope.dirty = false;
        this.scope.typeAhead = false;
        this.scope.change({
          keyCode: -1
        });
        return expect(this.scope.dirty).toBe(true);
      });
    });
    describe('#search', function() {
      it('should set scope.param equal to scope.searchString', inject(function($timeout) {
        this.scope.param = null;
        this.scope.searchString = 'foo';
        this.scope.search();
        $timeout.flush();
        return expect(this.scope.param).toBe(this.scope.searchString);
      }));
      return it('should set scope.dirty to false', function() {
        this.scope.dirty = true;
        this.scope.search();
        return expect(this.scope.dirty).toBe(false);
      });
    });
    describe('#clear', function() {
      it('should set scope.searchString to ""', function() {
        this.scope.searchString = 'foo';
        this.scope.clear();
        return expect(this.scope.searchString).toBe('');
      });
      return it('should call #search', function() {
        spyOn(this.scope, 'search');
        this.scope.clear();
        return expect(this.scope.search).toHaveBeenCalled();
      });
    });
    return describe('$watch', function() {
      it('should call #clear when api.clearFlag is set to true', function() {
        this.scope.api.clearFlag = false;
        spyOn(this.scope, 'clear');
        this.scope.api.clearFlag = true;
        this.scope.$apply();
        return expect(this.scope.clear).toHaveBeenCalled();
      });
      it('should call api#reset when api.clearFlag is set to true', function() {
        this.scope.api.clearFlag = false;
        spyOn(this.scope.api, 'reset');
        this.scope.api.clearFlag = true;
        this.scope.$apply();
        return expect(this.scope.api.reset).toHaveBeenCalled();
      });
      return it('should not call #clear or api#reset when api.clearFlag is set to false', function() {
        this.scope.api.clearFlag = true;
        spyOn(this.scope, 'clear');
        spyOn(this.scope.api, 'reset');
        this.scope.api.clearFlag = false;
        this.scope.$apply();
        expect(this.scope.clear).not.toHaveBeenCalled();
        return expect(this.scope.api.reset).not.toHaveBeenCalled();
      });
    });
  });
});
